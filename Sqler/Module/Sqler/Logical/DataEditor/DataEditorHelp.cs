using App.Module.AutoTemp.Controllers;
using App.Module.Sqler.Logical.DataEditor.DataProvider;
  
 
using Vit.AutoTemp.DataProvider;
using Vit.AutoTemp.DataProvider.Ef;
using Vit.AutoTemp.DataProvider.VitormProvider;
using Vit.Core.Module.Log;
using Vit.Core.Util.ConfigurationManager;
using Vit.Db.Module.Schema;
using Vit.Extensions;

using Vitorm;


namespace App.Module.Sqler.Logical.DataEditor
{
    public class DataEditorHelp
    {

        #region static Init
        static IEnumerable<IDataProvider> dataProviders =null;

        public static bool Init()
        {

            //(x.1)取消注册
            if (dataProviders!=null)
            {
                Vit.AutoTemp.AutoTempHelp.UnRegistDataProvider(dataProviders.ToArray());
                dataProviders = null;
            }



            //(x.2) init conn
            {
                var connInfo = dataEditorConfig.GetByPath<Vit.Db.Util.Data.ConnectionInfo>("Db");


                if (connInfo == null || string.IsNullOrEmpty(connInfo.type) || string.IsNullOrEmpty(connInfo.ConnectionString))
                {
                    return false;
                }

                dbFactory = new DbContextFactory<AutoMapDbContext>().Init(connInfo);
            }



            {
                //DbData
                try
                {
                    var provideArray = CreateEfDataProviderFromDb();
                    dataProviders = provideArray;
                    Vit.AutoTemp.AutoTempHelp.RegistDataProvider(provideArray);
                }
                catch (System.Exception ex)
                {
                    Logger.Error(ex);
                }                
            }

            {
                //DbSchemaDataProvider
                try
                {
                    Vit.AutoTemp.AutoTempHelp.RegistDataProvider(new DbSchemaDataProvider());
                }
                catch (System.Exception ex)
                {
                    Logger.Error(ex);
                }               
            }

            return true;

        }
        #endregion
 
        public static readonly JsonFile dataEditorConfig = new JsonFile(SqlerHelp.GetDataFilePath("sqler.DataEditor.json"));


        public static DbContextFactory<DbContext> dbFactory { get; private set; }


        #region dataProviderMap       

        public static void InitDataProvider(string tableName)
        {
            var dataProvider = Vit.AutoTemp.AutoTempHelp.GetDataProvider("Sqler_DataEditor_Db_" + tableName) as DataProvider_VitormQueryable;
            InitDataProvider(dataProvider);
        }
        public static void InitDataProvider(DataProvider_VitormQueryable dataProvider)
        {           
            if (dataProvider == null) return;

            var tableInfo = dataProvider.tableSchema;
            #region getComment from json config
            tableInfo.columns.ForEach(col => {

                var column_comment = DataEditorHelp.dataEditorConfig.GetStringByPath("dbComment." + tableInfo.table_name + "." + col.column_name);
                if (!string.IsNullOrEmpty(column_comment)) col.column_comment = column_comment;
            });
            #endregion


            dataProvider.Init();         
        }
        #endregion


        #region CreateEfDataProviderFromDb

        static IDataProvider[] CreateEfDataProviderFromDb()
        {
            List<TableSchema> schema;
            Dictionary<string, Type> entityMap;
            using (var scope = DataEditorHelp.dbFactory.CreateDbContext(out var db))
            {
                //先调用，确保已经映射实体
                entityMap = db.GetEntityTypeMap();

                schema = db.AutoGeneratedEntity_schema;
            }
             

            Func<(IServiceScope, DbContext)> CreateDbContext = () =>
            {
                var scope = DataEditorHelp.dbFactory.CreateDbContext(out var context);   
                return (scope, context);
            };

            return schema.Select((tableSchema) =>
            {
                var template = "Sqler_DataEditor_Db_" + tableSchema.table_name;
                var dataProvider = new EfDataProvider(template, tableSchema, entityMap[tableSchema.table_name], CreateDbContext);
                InitDataProvider(dataProvider);
                return dataProvider;
            }
            ).ToArray();


        }

        #endregion

    }
}
